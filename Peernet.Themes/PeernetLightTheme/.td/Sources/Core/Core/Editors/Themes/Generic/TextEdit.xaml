<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2019White.v22.2;component/Core/Core/Editors/Themes/Generic/TextEditBase.xaml"/>
        <dxt:ResourceDictionaryEx Source="{dx:DynamicEditorsResource InplaceBaseEdit.xaml, ShortPaths=True}"/>
    </ResourceDictionary.MergedDictionaries>

    <Thickness x:Key="{dxet:TextEditThemeKey ResourceKey=WatermarkTextBlockMargin}">2,0</Thickness>

    <sys:Boolean x:Key="{dxet:TextEditThemeKey ResourceKey=UseLightweightTemplates}">False</sys:Boolean>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <ControlTemplate x:Key="{dxet:BaseEditThemeKey ResourceKey=EmptyBorderTemplate}" TargetType="ContentControl">
        <ContentPresenter/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:BaseEditThemeKey ResourceKey=TextEditBorderTemplate}" TargetType="ContentControl">
        <Grid>
            <dxi:Chrome RenderTemplate="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=TextEditBorderTemplate}}"/>
            <ContentPresenter Name="borderContainer" Margin="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=TextEditBorderThickness}}"/>
            <dxi:Chrome dxei:ControlHelper.ShowFocusedState="{Binding Path=(dxei:ControlHelper.ShowFocusedState), RelativeSource={RelativeSource TemplatedParent}}"
                        IsHitTestVisible="False"
                        RenderTemplate="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=HoverBorderTemplate}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="Margin"
                        TargetName="borderContainer"
                        Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:BaseEditThemeKey ResourceKey=CommonBorderTemplate}" TargetType="ContentControl">
        <Grid>
            <dxi:Chrome RenderTemplate="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=CommonBorderTemplate}}"/>
            <ContentPresenter Name="borderContainer" Margin="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=CommonBorderThickness}}"/>
            <dxi:Chrome dxei:ControlHelper.ShowFocusedState="{Binding Path=(dxei:ControlHelper.ShowFocusedState), RelativeSource={RelativeSource TemplatedParent}}"
                        IsHitTestVisible="False"
                        RenderTemplate="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=HoverBorderTemplate}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="Margin"
                        TargetName="borderContainer"
                        Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:BaseEditThemeKey ResourceKey=CommonBorderDecorationTemplate}" TargetType="Control">
        <dxi:Chrome RenderTemplate="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=CommonBorderTemplate}}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:BaseEditThemeKey ResourceKey=TextEditBorderDecorationTemplate}" TargetType="Control">
        <dxi:Chrome RenderTemplate="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=TextEditBorderTemplate}}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:BaseEditThemeKey ResourceKey=HoverBorderDecorationTemplate}" TargetType="Control">
        <dxi:Chrome dxei:ControlHelper.ShowFocusedState="{Binding Path=(dxei:ControlHelper.ShowFocusedState), RelativeSource={RelativeSource TemplatedParent}}"
                    IsHitTestVisible="False"
                    RenderTemplate="{StaticResource {dxet:InplaceBaseEditThemeKey ResourceKey=HoverBorderTemplate}}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:TextEditThemeKey ResourceKey=ErrorControlTemplate}" TargetType="{x:Type dxe:ErrorControl}">
        <ContentPresenter x:Name="content"
                          Content="{TemplateBinding Content}"
                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                          ContentTemplate="{TemplateBinding ContentTemplate}"
                          Margin="3,0,3,0"
                          RenderTransformOrigin="0.5,0.5">
            <ContentPresenter.Resources>
                <Storyboard x:Key="showErrorStoryboard">
                    <DoubleAnimation BeginTime="00:00:00"
                                     Duration="00:00:00.2000000"
                                     From="0"
                                     Storyboard.TargetName="content"
                                     Storyboard.TargetProperty="Opacity"
                                     To="1"/>
                    <DoubleAnimation BeginTime="00:00:00"
                                     Duration="00:00:00.1000000"
                                     From="1"
                                     Storyboard.TargetName="content"
                                     Storyboard.TargetProperty="RenderTransform.ScaleX"
                                     To="1.2"/>
                    <DoubleAnimation BeginTime="00:00:00.1000000"
                                     Duration="00:00:00.1000000"
                                     From="1.2"
                                     Storyboard.TargetName="content"
                                     Storyboard.TargetProperty="RenderTransform.ScaleX"
                                     To="1"/>
                    <DoubleAnimation BeginTime="00:00:00"
                                     Duration="00:00:00.1000000"
                                     From="1"
                                     Storyboard.TargetName="content"
                                     Storyboard.TargetProperty="RenderTransform.ScaleY"
                                     To="1.2"/>
                    <DoubleAnimation BeginTime="00:00:00.1000000"
                                     Duration="00:00:00.1000000"
                                     From="1.2"
                                     Storyboard.TargetName="content"
                                     Storyboard.TargetProperty="RenderTransform.ScaleY"
                                     To="1"/>
                </Storyboard>
                <Storyboard x:Key="hideErrorStoryboard">
                    <DoubleAnimation BeginTime="00:00:00"
                                     Duration="00:00:00"
                                     Storyboard.TargetName="content"
                                     Storyboard.TargetProperty="Opacity"
                                     To="0"/>
                </Storyboard>
            </ContentPresenter.Resources>
            <ContentPresenter.RenderTransform>
                <ScaleTransform/>
            </ContentPresenter.RenderTransform>
        </ContentPresenter>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:TextEditThemeKey ResourceKey=Template}" TargetType="{x:Type dxe:TextEdit}">
        <ContentControl x:Name="PART_Root"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        dx:FocusHelper2.Focusable="False"
                        dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                        dxe:EditorAppearanceProperties.ReadOnlyBackground="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource TemplatedParent}}"
                        dxe:EditorAppearanceProperties.ReadOnlyBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                        dxei:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
                        dxei:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
                        dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                        dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                        dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                        dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                        HorizontalContentAlignment="Stretch"
                        Template="{TemplateBinding ActualBorderTemplate}"
                        VerticalContentAlignment="Stretch">
            <Grid SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <dxe:ErrorControl x:Name="PART_ErrorPresenter"/>
                <dxe:EditorControl x:Name="PART_Content"
                                   Grid.Column="1"
                                   Template="{TemplateBinding ActualEditorControlTemplate}"/>
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource Self}}" Value="true">
                <Setter Property="dx:WpfSvgPalette.Palette"
                        TargetName="PART_ErrorPresenter"
                        Value="{DynamicResource {dxet:InplaceBaseEditThemeKey ResourceKey=ValidationErrorSvgPalette}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>