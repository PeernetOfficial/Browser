<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2019White.v22.2;component/UICore/UIData.xaml"/>
        <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2019White.v22.2;component/Core/Core/Themes/Office2019White/PseudoWindow/PseudoWindowCaption.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--WARNING!
    We should use only core prefixes for themekeys, e.g. dxt. Because sometimes we use this keys for ThemedWindow without RibbonControl and we don't load Ribbon assembley if we don't really need it-->

    <!-- Window -->

    <SolidColorBrush x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonDefaultButtonForegroundNormalState}" Color="$Foreground"/>

    <SolidColorBrush x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonDefaultButtonForegroundMouseOverState}" Color="$Foreground"/>

    <SolidColorBrush x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonDefaultButtonForegroundPressedState}" Color="$Foreground"/>

    <SolidColorBrush x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonCloseButtonForegroundNormalState}" Color="$Foreground"/>

    <SolidColorBrush x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonCloseButtonForegroundMouseOverState}" Color="$Window.Background"/>

    <SolidColorBrush x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonCloseButtonForegroundPressedState}" Color="$Window.Background"/>

    <!-- General -->

    <DataTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonCloseButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Close}"/>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonRestoreButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Restore}"/>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonMinimizeButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Minimize}"/>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonMaximizeButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Maximize}"/>
    </DataTemplate>

    <!-- Button States -->

    <ControlTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonDefaultButtonBackgroundNormalState}">
        <Border Background="Transparent" cs:id="Border_0000"/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonCloseButtonBackgroundNormalState}">
        <Border Background="Transparent" cs:id="Border_0000"/>
    </ControlTemplate>

    <!-- IsMouseOver -->

    <ControlTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonDefaultButtonBackgroundMouseOverState}">
        <Border Background="$Window.HeaderButton.HoverBackground" cs:id="Border_0000"/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonCloseButtonBackgroundMouseOverState}">
        <Border x:Name="CloseButtonMouseOverState"
                Background="$Window.CloseButton.HoverBackground"
                cs:id="Border_0000"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ActualRoundCorners, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dx:ThemedWindow}}, FallbackValue=False}" Value="true">
                <Setter Property="CornerRadius"
                        TargetName="CloseButtonMouseOverState"
                        Value="0,7,0,0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Maximized">
                <Setter Property="CornerRadius"
                        TargetName="CloseButtonMouseOverState"
                        Value="0,0,0,0"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- IsPressed -->

    <ControlTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonDefaultButtonBackgroundPressedState}">
        <Border Background="$Window.HeaderButton.SelectionBackground" cs:id="Border_0000"/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonCloseButtonBackgroundPressedState}">
        <Border x:Name="CloseButtonPressedState"
                Background="$Window.CloseButton.SelectionBackground"
                cs:id="Border_0000"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ActualRoundCorners, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dx:ThemedWindow}}, FallbackValue=False}" Value="true">
                <Setter Property="CornerRadius"
                        TargetName="CloseButtonPressedState"
                        Value="0,7,0,0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Maximized">
                <Setter Property="CornerRadius"
                        TargetName="CloseButtonPressedState"
                        Value="0,0,0,0"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--RIBBON HEADER ITEMS STYLES-->

    <!-- Ribbon HeaderButton Style -->

    <Style x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonHeaderButtonStyle}"
           BasedOn="{StaticResource ResourceKey=headerItemControlStyle}"
           TargetType="{x:Type dx:HeaderItemControl}">
        <Setter Property="Width" Value="46"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

    <!-- Ribbon CloseHeaderButton Style -->

    <Style x:Key="{dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonHeaderCloseButtonStyle}"
           BasedOn="{StaticResource ResourceKey={dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonHeaderButtonStyle}}"
           TargetType="{x:Type dx:HeaderItemControl}">
    </Style>

</ResourceDictionary>