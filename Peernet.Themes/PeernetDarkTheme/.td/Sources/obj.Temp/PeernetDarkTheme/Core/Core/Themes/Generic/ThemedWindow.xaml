<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:core="clr-namespace:DevExpress.Utils;assembly=DevExpress.Data.Desktop.v22.1" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxcore_unique_xmlns="http://schemas.devexpress.com/winfx/2008/xaml/core">

    <ResourceDictionary.MergedDictionaries>
        <dxt:ResourceDictionaryEx Source="{dx:DynamicThemeResource PseudoWindow.xaml, ResourcePath=Themes, ResourcePathInTheme='Core/Core/Themes', TypeInTargetAssembly={x:Type dxi:RenderTemplate}}" />
    </ResourceDictionary.MergedDictionaries>

    

    <Color x:Key="nearbyTransparentColor" A="1" B="0" G="0" R="0" />

    <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveBackground}" Color="{StaticResource nearbyTransparentColor}" />

    <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveBackground}" Color="{StaticResource nearbyTransparentColor}" />

    <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveContentBackground}" Color="{StaticResource nearbyTransparentColor}" />

    <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}" Color="{StaticResource nearbyTransparentColor}" />

    <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveContentBorderBrush}" Color="{StaticResource nearbyTransparentColor}" />

    <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}" Color="{StaticResource nearbyTransparentColor}" />

    <SolidColorBrush x:Key="transparentHeaderBackground" Color="{StaticResource nearbyTransparentColor}" />

    <Thickness x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowContentBorderThickness}">0</Thickness>

    <Thickness x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowNormalPadding}">0</Thickness>

    <CornerRadius x:Key="win11CornerRadius">7</CornerRadius>

    <CornerRadius x:Key="win11HeaderCornerRadius">7,7,0,0</CornerRadius>

    <CornerRadius x:Key="win11ContentCornerRadius">7</CornerRadius>

    <CornerRadius x:Key="win11ToolWindowCornerRadius">4</CornerRadius>

    <CornerRadius x:Key="win11ToolWindowHeaderCornerRadius">4,4,0,0</CornerRadius>

    <CornerRadius x:Key="win11ToolWindowContentCornerRadius">4</CornerRadius>

    

    

    <Style x:Key="sizeGripStyle" TargetType="{x:Type dx:ThemedWindowSizeGrip}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;59;6" /><Setter Property="Cursor" Value="SizeNWSE" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template" Value="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerSizeGripTemplate}}" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Margin" Value="{Binding Path= Padding, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ResizeMode}" Value="CanResizeWithGrip">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    

    <Style x:Key="contentBackgroundBorderStyle" TargetType="{x:Type dx:ThemedWindowContentBorder}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;77;6" /><Setter Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveContentBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowContentBorderThickness}}" />
        <Setter Property="Margin" Value="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="IsHitTestVisible" Value="{Binding Path=(dxi:ThemedWindowsHelper.ActualHitTestVisible), RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ContentCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource TemplatedParent}}" Value="ToolWindow" />
                    <Condition Binding="{Binding Path=(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowContentCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveContentBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveContentBorderBrush}}" />
                <Setter Property="BorderThickness" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowContentBorderThickness}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SizeToContent}" Value="WidthAndHeight" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBox), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="HorizontalAlignment" Value="Center" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SizeToContent}" Value="WidthAndHeight">
                <Setter Property="MinWidth">
                    <Setter.Value>
                        <MultiBinding Converter="{dx:ContentBorderMinWidthConverter}">
                            <Binding Path="MinWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWindowKind}" Value="Ribbon">
                <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonContentBorderThickness}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWindowKind}" Value="Tabbed">
                <Setter Property="Background" Value="Transparent" cs:id="Setter_0000" />
                <Setter Property="BorderBrush" Value="Transparent" cs:id="Setter_0001" />
                <Setter Property="BorderThickness" Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    

    <Style x:Key="windowBorderStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;175;6" /><Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBackground}}" />
        <Setter Property="BorderBrush" Value="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" />
        
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBackground}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBackground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11CornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource TemplatedParent}}" Value="ToolWindow" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveBackground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveBackground}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveBackground}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    

    <Style x:Key="statusPanelStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;239;6" /><Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="DockPanel.Dock" Value="Bottom" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBackground}}" />
    </Style>

    

    <Style x:Key="windowTitleTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;248;6" /><Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Tag" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowIconMargin}}" />
        <Setter Property="FontSize" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleFontSize}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleFontWeight}}" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    

    

    <Style x:Key="dialogFooterBorderStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;262;6" /><Setter Property="Background" Value="Transparent" cs:id="Setter_0000" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ShowDialogFooter, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    

    

    <Style x:Key="messageBoxImageStyle" TargetType="{x:Type dx:DXImage}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;278;6" /><Setter Property="Width" Value="48" />
        <Setter Property="Height" Value="48" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="Source" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Image), RelativeSource={RelativeSource Self}}" />
    </Style>

    

    <Style x:Key="messageBoxContentPresenterStyle" TargetType="{x:Type ContentPresenter}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;288;6" /><Setter Property="Margin" Value="12,0,0,0" />
    </Style>

    

    <Style x:Key="messageBoxTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;294;6" /><Setter Property="Text" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Text), RelativeSource={RelativeSource Self}}" />
        <Setter Property="TextAlignment" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.TextAlignment), RelativeSource={RelativeSource Self}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Margin" Value="12,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    

    <ItemsPanelTemplate x:Key="headerItemsControlPanelTemplate">
        <StackPanel x:Name="PART_ToolbarPanel" Orientation="Horizontal" VerticalAlignment="Stretch" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;307;10" />
    </ItemsPanelTemplate>

    

    <Style x:Key="headerItemsControlStyle" TargetType="{x:Type dx:ThemedWindowHeaderItemsControlBase}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;314;6" /><Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="dxi:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowToolbarMargin}}" />
        <Setter Property="ItemsPanel" Value="{StaticResource headerItemsControlPanelTemplate}" />
    </Style>

    

    

    <ControlTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonTemplate}" TargetType="{x:Type dx:ThemedWindowBackButton}">
        <Grid dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;327;10">
            <Control x:Name="PART_Background" Focusable="False" Template="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundNormalState}}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;328;14" />
            <dx:DXBorder x:Name="MarginBorder" Background="Transparent" Margin="4,0" cs:id="Border_0000" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;331;14">
                <ContentPresenter x:Name="PART_ContentPresenter" ContentTemplate="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundGlyph}}" Focusable="False" HorizontalAlignment="Center" RecognizesAccessKey="True" VerticalAlignment="Center" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;335;18" />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template" TargetName="PART_Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundMouseoverState}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundMouseoverState}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Template" TargetName="PART_Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundPressedState}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundPressedState}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundNormalState}}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    

    <ControlTemplate x:Key="themedWindowTitleTemplate" TargetType="{x:Type dx:ThemedWindowTitle}">
        <TextBlock x:Name="PART_TitleText" Style="{StaticResource windowTitleTextBlockStyle}" Text="{TemplateBinding Content}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;369;10" />
    </ControlTemplate>

    

    <ControlTemplate x:Key="themedWindowIconTemplate" TargetType="{x:Type dx:ThemedWindowIcon}">
        <dxcore_unique_xmlns:DXImage x:Name="PART_Image">
            <dxcore_unique_xmlns:DXImage.Source>
                <MultiBinding Converter="{dx:WindowIconConverter}">
                    <Binding Path="Icon" RelativeSource="{RelativeSource AncestorType={x:Type dx:ThemedWindow}}" />
                    <Binding Path="TemplatedParent" RelativeSource="{RelativeSource Mode=Self}" />
                </MultiBinding>
            </dxcore_unique_xmlns:DXImage.Source>
        </dxcore_unique_xmlns:DXImage>
    </ControlTemplate>

    

    <ControlTemplate x:Key="themedWindowControlBoxTemplate" TargetType="{x:Type dx:ThemedWindowControlBoxBorder}">
        <dx:DXBorder x:Name="PART_ControlBoxRootBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" dxi:WindowChrome.IsHitTestVisibleInChrome="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;390;10">
            <Grid x:Name="PART_ControlBoxGrid" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;395;14">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                
                <dxcore_unique_xmlns:ThemedWindowHeaderItemsControl x:Name="PART_HeaderItems" Grid.Column="0" Style="{StaticResource headerItemsControlStyle}" />
                
                <DockPanel x:Name="PART_Buttons" dxe:MouseEventLockHelper.IsEnabled="false" Grid.Column="1" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;405;18">
                    
                    <dxcore_unique_xmlns:HeaderItemControl x:Name="PART_Minimize" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" Command="{x:Static dxi:WindowSystemCommands.MinimizeWindowCommand}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" ToolTip="{dxe:EditorStringId ThemedWindow_Minimize}" ToolTipService.InitialShowDelay="1000">
                        <dxcore_unique_xmlns:HeaderItemControl.Visibility>
                            <Binding Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}">
                                <Binding.ConverterParameter>
                                    <dxcore_unique_xmlns:ControlBoxButtons>Minimize</dxcore_unique_xmlns:ControlBoxButtons>
                                </Binding.ConverterParameter>
                            </Binding>
                        </dxcore_unique_xmlns:HeaderItemControl.Visibility>
                    </dxcore_unique_xmlns:HeaderItemControl>
                    <dxcore_unique_xmlns:HeaderItemControl x:Name="PART_MinimizeRestore" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" Command="{x:Static dxi:WindowSystemCommands.RestoreWindowCommand}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" ToolTip="{dxe:EditorStringId ThemedWindow_Restore}" ToolTipService.InitialShowDelay="1000">
                        <dxcore_unique_xmlns:HeaderItemControl.Visibility>
                            <MultiBinding Converter="{dx:WindowControlBoxButtonsToVisibilityMultiValuesConverter}">
                                <Binding Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}" />
                                <Binding ElementName="PART_Minimize" Path="Visibility" />
                                <MultiBinding.ConverterParameter>
                                    <dxcore_unique_xmlns:ControlBoxButtons>Restore</dxcore_unique_xmlns:ControlBoxButtons>
                                </MultiBinding.ConverterParameter>
                            </MultiBinding>
                        </dxcore_unique_xmlns:HeaderItemControl.Visibility>
                    </dxcore_unique_xmlns:HeaderItemControl>
                    
                    <dxcore_unique_xmlns:HeaderItemControl x:Name="PART_Restore" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" Command="{x:Static dxi:WindowSystemCommands.RestoreWindowCommand}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self} }" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" ToolTip="{dxe:EditorStringId ThemedWindow_Restore}" ToolTipService.InitialShowDelay="1000">
                        <dxcore_unique_xmlns:HeaderItemControl.Visibility>
                            <MultiBinding Converter="{dx:WindowControlBoxButtonsToVisibilityMultiValuesConverter}">
                                <Binding Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}" />
                                <Binding ElementName="PART_Maximize" Path="Visibility" />
                                <MultiBinding.ConverterParameter>
                                    <dxcore_unique_xmlns:ControlBoxButtons>MaximizeRestore</dxcore_unique_xmlns:ControlBoxButtons>
                                </MultiBinding.ConverterParameter>
                            </MultiBinding>
                        </dxcore_unique_xmlns:HeaderItemControl.Visibility>
                    </dxcore_unique_xmlns:HeaderItemControl>
                    
                    <dxcore_unique_xmlns:HeaderItemControl x:Name="PART_Maximize" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" Command="{x:Static dxi:WindowSystemCommands.MaximizeWindowCommand}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self} }" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" ToolTip="{dxe:EditorStringId ThemedWindow_Maximize}" ToolTipService.InitialShowDelay="1000">
                        <dxcore_unique_xmlns:HeaderItemControl.Visibility>
                            <Binding Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}">
                                <Binding.ConverterParameter>
                                    <dxcore_unique_xmlns:ControlBoxButtons>MaximizeRestore</dxcore_unique_xmlns:ControlBoxButtons>
                                </Binding.ConverterParameter>
                            </Binding>
                        </dxcore_unique_xmlns:HeaderItemControl.Visibility>
                    </dxcore_unique_xmlns:HeaderItemControl>
                    
                    <dxcore_unique_xmlns:HeaderItemControl x:Name="PART_CloseButton" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" Command="{x:Static dxi:WindowSystemCommands.CloseWindowCommand}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self} }" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CloseTemplateProvider), RelativeSource={RelativeSource Self}}" ToolTip="{dxe:EditorStringId ThemedWindow_Close}" ToolTipService.InitialShowDelay="1000">
                        <dxcore_unique_xmlns:HeaderItemControl.Visibility>
                            <Binding Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}">
                                <Binding.ConverterParameter>
                                    <dxcore_unique_xmlns:ControlBoxButtons>Close</dxcore_unique_xmlns:ControlBoxButtons>
                                </Binding.ConverterParameter>
                            </Binding>
                        </dxcore_unique_xmlns:HeaderItemControl.Visibility>
                    </dxcore_unique_xmlns:HeaderItemControl>
                </DockPanel>
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsYesNoDialog), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="IsEnabled" TargetName="PART_CloseButton" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ResizeMode), RelativeSource={RelativeSource Self}}" Value="CanMinimize">
                <Setter Property="IsEnabled" TargetName="PART_Maximize" Value="False" />
                <Setter Property="IsEnabled" TargetName="PART_Restore" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" Value="Maximized">
                <Setter Property="Visibility" TargetName="PART_Maximize" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    

    <ControlTemplate x:Key="themedWindowHeaderTemplate" TargetType="{x:Type dx:ThemedWindowHeader}">
        <dx:DXBorder x:Name="PART_HeaderRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" Opacity="{TemplateBinding Opacity}" Padding="{TemplateBinding Padding}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;525;10">
            <DockPanel x:Name="PART_HeaderDock" LastChildFill="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;530;14">
                <dxcore_unique_xmlns:ThemedWindowIcon x:Name="PART_WindowIcon" DockPanel.Dock="Left" />
                <dxcore_unique_xmlns:ThemedWindowBackButton x:Name="PART_WindowBackButton" DockPanel.Dock="Left" Style="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonStyle}}" UseLayoutRounding="True" />
                <dxcore_unique_xmlns:ThemedWindowControlBoxBorder x:Name="PART_HeaderItemsAndButtons" DockPanel.Dock="Right" UseLayoutRounding="True" />
                <dxcore_unique_xmlns:ThemedWindowToolbarItemsControl x:Name="PART_ToolbarItems" DockPanel.Dock="Left" Style="{StaticResource headerItemsControlStyle}" />
                <dxcore_unique_xmlns:ThemedWindowTitle x:Name="PART_WindowTitle" />
            </DockPanel>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowIcon), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_WindowIcon" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowBackButton), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Visibility" TargetName="PART_WindowBackButton" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowTitle), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_WindowTitle" Value="Collapsed" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" Value="Ribbon" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.IsRibbonControlAsContent), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.RibbonHeaderVisibility), RelativeSource={RelativeSource Self}}" Value="Visible" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.RibbonControlVisibility), RelativeSource={RelativeSource Self}}" Value="Visible" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" TargetName="PART_WindowTitle" Value="Collapsed" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Opacity" TargetName="PART_WindowIcon" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
                    <Setter Property="Opacity" TargetName="PART_WindowTitle" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
                    <Setter Property="Opacity" TargetName="PART_HeaderItemsAndButtons" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Opacity" TargetName="PART_WindowIcon" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
                <Setter Property="Opacity" TargetName="PART_WindowTitle" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
                <Setter Property="Opacity" TargetName="PART_HeaderItemsAndButtons" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.UseInactiveAppearanceForWholeHeader), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Opacity" TargetName="PART_ToolbarItems" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.UseInactiveAppearanceForWholeHeader), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Opacity" TargetName="PART_ToolbarItems" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    

    <ControlTemplate x:Key="themedWindowHeaderTabbedTemplate" TargetType="{x:Type dx:ThemedWindowHeader}">
        <dx:DXBorder x:Name="PART_HeaderRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" Opacity="{TemplateBinding Opacity}" Padding="{TemplateBinding Padding}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;629;10">
            <DockPanel x:Name="PART_HeaderDock" LastChildFill="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;634;14">
                <dxcore_unique_xmlns:ThemedWindowIcon x:Name="PART_WindowIcon" DockPanel.Dock="Left" />
                <dxcore_unique_xmlns:ThemedWindowControlBoxBorder x:Name="PART_HeaderItemsAndButtons" DockPanel.Dock="Right" />
                <dxcore_unique_xmlns:ThemedWindowTitle x:Name="PART_WindowTitle" />
                <dxcore_unique_xmlns:ThemedWindowHiddenBorder x:Name="PART_TabControlHeaderHiddenBorder" DockPanel.Dock="Right" />
            </DockPanel>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowIcon), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_WindowIcon" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowTitle), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_WindowTitle" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    

    <ControlTemplate x:Key="themedWindowTemplate" TargetType="{x:Type dx:ThemedWindow}">
        <dxcore_unique_xmlns:ThemedWindowRoot x:Name="PART_WindowRoot">
            <Rectangle x:Name="PART_AcrylicBackground" Fill="Transparent" Visibility="Collapsed" cs:id="Rectangle_0000" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;659;14" />
            <AdornerDecorator x:Name="PART_WindowAdornerDecorator" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;663;14">
                <dxcore_unique_xmlns:ThemedWindowBorder x:Name="PART_WindowBorder" Style="{StaticResource windowBorderStyle}">
                    <DockPanel x:Name="PART_WindowHeaderContentAndStatusPanel" LastChildFill="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;665;22">
                        <dxcore_unique_xmlns:ThemedWindowBorder x:Name="PART_StatusPanel" Style="{StaticResource statusPanelStyle}" />
                        <DockPanel x:Name="PART_WindowHeaderAndContent" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;667;26">
                            <dxcore_unique_xmlns:ThemedWindowHeader x:Name="PART_HeaderBorder" DockPanel.Dock="Top" />
                            <dx:DXBorder DockPanel.Dock="Top" HorizontalAlignment="Stretch" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;669;30">
                                <ContentPresenter x:Name="PART_HeaderContentPresenter" Content="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderContent), RelativeSource={RelativeSource Self}}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;670;34" />
                            </dx:DXBorder>
                            <dxcore_unique_xmlns:ThemedWindowContentBorder x:Name="PART_ContentBackgroundBorder" DockPanel.Dock="Bottom" Style="{StaticResource contentBackgroundBorderStyle}">
                                <DockPanel x:Name="PART_ContentAndFooter" DockPanel.Dock="Top" LastChildFill="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;675;34">
                                    <dxcore_unique_xmlns:ThemedWindowBorder x:Name="PART_DialogFooter" DockPanel.Dock="Bottom" Style="{StaticResource dialogFooterBorderStyle}">
                                        <dxcore_unique_xmlns:ThemedWindowDialogButtonsControl x:Name="PART_DialogFooterButtonsControl" />
                                    </dxcore_unique_xmlns:ThemedWindowBorder>
                                    <ContentPresenter x:Name="PART_WindowContentPresenter" DockPanel.Dock="Bottom" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;683;38" />
                                </DockPanel>
                            </dxcore_unique_xmlns:ThemedWindowContentBorder>
                        </DockPanel>
                    </DockPanel>
                </dxcore_unique_xmlns:ThemedWindowBorder>
            </AdornerDecorator>
            <dxcore_unique_xmlns:ThemedWindowSizeGrip x:Name="PART_SizeGrip" Style="{StaticResource sizeGripStyle}" />
        </dxcore_unique_xmlns:ThemedWindowRoot>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowStatusPanel" Value="True">
                <Setter Property="Visibility" TargetName="PART_StatusPanel" Value="Visible" />
            </Trigger>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="Visibility" TargetName="PART_SizeGrip" Value="Collapsed" />
                <Setter Property="BorderThickness" TargetName="PART_WindowBorder" Value="0" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    

    

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowIcon}" TargetType="{x:Type dx:ThemedWindowIcon}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;713;6" /><Setter Property="Visibility" Value="Visible" />
        <Setter Property="Width" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowIconWidth}}" />
        <Setter Property="Height" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowIconHeight}}" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowIconMargin}}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template" Value="{StaticResource themedWindowIconTemplate}" />
        <Setter Property="dxi:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    

    <Style x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowStyle}" TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;726;6" /><Setter Property="Template" Value="{StaticResource themedWindowTemplate}" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowNormalPadding}}" />
        <Setter Property="TitleAlignment" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleAlignment}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowContentForeground}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveContentBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowBorderThickness}}" />
        <Setter Property="ActiveGlowColor" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBorderBrush}}" />
        <Setter Property="InactiveGlowColor" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBorderBrush}}" />
        <Setter Property="AcrylicColor" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=AcrylicColor}}" />
        <Setter Property="MinWidth" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxi:ThemedWindowsHelper.MinWidth)}" />
        <Setter Property="dxi:WindowChrome.WindowChrome">
            <Setter.Value>
                <dxi:WindowChrome />
            </Setter.Value>
        </Setter>
        <Setter Property="dxi:WindowChrome.CaptionHeight" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowHeaderHeight}}" />
        <Setter Property="dxi:WindowChrome.ResizeBorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=ResizeBorderThickness}" />
        <Setter Property="dxi:WindowChrome.IsTouchMode" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dx:ThemeManager.IsTouchEnabled)}" />
        <Setter Property="dxi:WindowGlowChrome.WindowGlowChrome">
            <Setter.Value>
                <dxi:WindowGlowChrome />
            </Setter.Value>
        </Setter>
        <Setter Property="dxi:WindowGlowChrome.ShowGlow" Value="{Binding RelativeSource={RelativeSource Self}, Path=ShowGlow}" />
        <Setter Property="dxi:WindowGlowChrome.UseGlowColors" Value="{Binding RelativeSource={RelativeSource Self}, Path=UseGlowColors}" />
        <Setter Property="dx:HeaderItemControl.CommonTemplateProvider" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderItemControlCommonTemplateProvider}}" />
        <Setter Property="dx:HeaderItemControl.CloseTemplateProvider" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderItemControlCloseTemplateProvider}}" />
        <Setter Property="HeaderForeground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleForeground}}" />
        <Style.Triggers>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            <DataTrigger Binding="{Binding Path=(dxi:WindowChromeWorker.IsNCActive), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="dxi:ThemedWindowsHelper.IsMessageBoxNCActive" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowOptions.UseWindow10HeaderColor), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="HeaderBackground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveHeaderBackground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dx:ThemeManager.ThemeName), RelativeSource={RelativeSource Mode=Self}, Converter={dxi:ThemeToRoundCornersConverter}}" Value="True">
                <Setter Property="RoundWindowCorners" Value="True" />
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsActive" Value="False" />
                    <Condition Property="dxi:WindowButtonHelper.IsActiveAppearance" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBorderBrush}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="dxi:ThemedWindowsHelper.IsMessageBoxNCActive" Value="False">
                <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowInTaskbar" Value="False" />
                    <Condition Property="WindowState" Value="Minimized" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="ControlBoxButtonSet" Value="Close,MaximizeRestore,Restore" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="WindowStyle" Value="ToolWindow">
                <Setter Property="ControlBoxButtonSet" Value="Close" />
                <Setter Property="ShowIcon" Value="False" />
                <Setter Property="ShowGlow" Value="False" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="NoResize">
                <Setter Property="dxi:WindowChrome.ResizeBorderThickness" Value="0" />
                <Setter Property="ControlBoxButtonSet" Value="Close" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="CanMinimize">
                <Setter Property="ControlBoxButtonSet" Value="Close,MaximizeRestore,Minimize" />
                <Setter Property="dxi:WindowChrome.ResizeBorderThickness" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="WindowStyle" Value="None" />
                    <Condition Property="EnableAcrylic" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="dxi:WindowChrome.CaptionHeight" Value="0" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=ActualWindowKind, RelativeSource={RelativeSource Self}}" Value="Ribbon">
                <Setter Property="Padding" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonPadding}}" />
                <Setter Property="HeaderForeground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonTitleForeground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActualWindowKind, RelativeSource={RelativeSource Self}}" Value="Ribbon" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsRibbonControlAsContent), RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="TitleAlignment" Value="Center" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowControlBoxBorder}" TargetType="{x:Type dx:ThemedWindowControlBoxBorder}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;849;6" /><Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template" Value="{StaticResource themedWindowControlBoxTemplate}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBackground}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBorderThickness}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBorderBrush}}" />
        <Setter Property="VerticalAlignment" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxVerticalAlignment}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
    </Style>

    

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowTitle}" TargetType="{x:Type dx:ThemedWindowTitle}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;862;6" /><Setter Property="Template" Value="{StaticResource themedWindowTitleTemplate}" />
        <Setter Property="TitleAlignment" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.TitleAlignment), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Content" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.Title), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderForeground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleControlMargin}}" />
    </Style>

    

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowHeader}" TargetType="{x:Type dx:ThemedWindowHeader}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;876;6" /><Setter Property="Height" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowChrome.CaptionHeight), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Content" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.Title), RelativeSource={RelativeSource Self}}" />
        <Setter Property="TitleAlignment" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.TitleAlignment), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderNormalPadding}}" />
        <Setter Property="Template" Value="{StaticResource themedWindowHeaderTemplate}" />
        <Setter Property="Focusable" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource Self}}" Value="None">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11HeaderCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource Self}}" Value="ToolWindow" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowHeaderCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="EnableTransparency" Value="True" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderBackground}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderBackground}}" />
            </DataTrigger>
            <Trigger Property="EnableTransparency" Value="True">
                <Setter Property="Background" Value="{StaticResource transparentHeaderBackground}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" Value="Tabbed">
                <Setter Property="Template" Value="{StaticResource themedWindowHeaderTabbedTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" Value="Ribbon">
                <Setter Property="Padding" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderRibbonPadding}}" />
                <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonActiveHeaderBackground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" Value="Ribbon" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonInactiveHeaderBackground}}" />
                    <Setter Property="Opacity" Value="1" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" Value="Minimized" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowInTaskbar), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="HorizontalAlignment" Value="Left" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    

    

    <ControlTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlTemplate}" TargetType="{x:Type dx:ThemedWindowDialogButtonsControl}">
        <dx:DXBorder x:Name="PART_DialogButtonsControlBorder" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;964;10">
            <ItemsPresenter dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;965;14" />
        </dx:DXBorder>
    </ControlTemplate>

    

    <ItemsPanelTemplate x:Key="dialogButtonsControlPanelTemplate">
        <Grid x:Name="PART_DialogButtonsGrid" Margin="12" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;972;10" />
    </ItemsPanelTemplate>

    

    <ControlTemplate x:Key="dialogButtonsControlGroupContainerTemplate">
        <StackPanel x:Name="PART_GroupItemStack" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;978;10">
            <ItemsPresenter dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;979;14" />
        </StackPanel>
    </ControlTemplate>

    

    <ItemsPanelTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlItemsPanelTemplate}">
        <StackPanel x:Name="PART_ItemsStackPanel" Orientation="Horizontal" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;986;10" />
    </ItemsPanelTemplate>

    

    <Style x:Key="dialogButtonsControlGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;991;6" /><Setter Property="Template" Value="{StaticResource dialogButtonsControlGroupContainerTemplate}" />
        <Setter Property="HorizontalAlignment" Value="{Binding Path=Name, Converter={dx:GroupItemNameToHorizontalAlignmentConverter}}" />
    </Style>

    

    

    <GroupStyle x:Key="{dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlGroupStyle}" ContainerStyle="{StaticResource dialogButtonsControlGroupContainerStyle}" Panel="{StaticResource dialogButtonsControlPanelTemplate}" />

    

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowDialogButtonsControl}" TargetType="{x:Type dx:ThemedWindowDialogButtonsControl}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;1006;6" /><Setter Property="Template" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlTemplate}}" />
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlItemsPanelTemplate}}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    

    

    <DataTemplate x:Key="messageBoxContentTemplate">
        <dxcore_unique_xmlns:ThemedMessageBoxContent x:Name="PART_MessageBoxContent" />
    </DataTemplate>

    

    <ControlTemplate x:Key="messageBoxContentControlTemplate" TargetType="{x:Type dx:ThemedMessageBoxContent}">
        <DockPanel x:Name="PART_MessageBoxContentDock" LastChildFill="True" Margin="12" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;1024;10">
            <dxcore_unique_xmlns:DXImage x:Name="PART_MessageBoxImage" Style="{StaticResource messageBoxImageStyle}" />
            <TextBlock x:Name="PART_MessageBoxText" Style="{StaticResource messageBoxTextStyle}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;1028;14" />
            
            
            <ContentPresenter x:Name="PART_MessageBoxContentPresenter" Content="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.MessageContent), RelativeSource={RelativeSource Self}}" Style="{StaticResource messageBoxContentPresenterStyle}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="Core\Core\Themes\Generic\ThemedWindow.xaml;1031;14" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.MessageContent), RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="PART_MessageBoxContentPresenter" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Image), RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="PART_MessageBoxImage" Value="Collapsed" />
                <Setter Property="Margin" TargetName="PART_MessageBoxText" Value="0" />
                <Setter Property="Margin" TargetName="PART_MessageBoxContentPresenter" Value="0" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    

    

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedMessageBoxContent}" TargetType="{x:Type dx:ThemedMessageBoxContent}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;1059;6" /><Setter Property="Template" Value="{StaticResource messageBoxContentControlTemplate}" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedMessageBoxWindow}" BasedOn="{StaticResource {dxt:ThemedWindowThemeKey ResourceKey=WindowStyle}}" TargetType="{x:Type dx:ThemedMessageBoxWindow}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;1066;6" /><Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="ShowIcon" Value="False" />
        <Setter Property="MaxWidth" Value="500" />
        <Setter Property="MinWidth" Value="150" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="ContentTemplate" Value="{StaticResource messageBoxContentTemplate}" />
    </Style>

    

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.HeaderItemControl}" BasedOn="{StaticResource headerItemControlStyle}" TargetType="{x:Type dx:HeaderItemControl}"><Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="Core\Core\Themes\Generic\ThemedWindow.xaml;1081;6" /></Style>

    

    

    <dxcore_unique_xmlns:CommonHeaderItemControlTemplateProvider x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderItemControlCommonTemplateProvider}" HeaderItemControlStyle="{StaticResource ResourceKey={dxt:ThemedWindowHeaderItemsThemeKey ResourceKey=HeaderButtonStyle}}" MaximizeGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerMaximizeButtonGlyph}}" MinimizeGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerMinimizeButtonGlyph}}" MouseOverBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundMouseOverState}}" MouseOverForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundMouseOverState}}" NormalBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundNormalState}}" NormalForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundNormalState}}" PressedBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundPressedState}}" PressedForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundPressedState}}" RestoreGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerRestoreButtonGlyph}}" />

    

    <dxcore_unique_xmlns:CloseHeaderItemControlTemplateProvider x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderItemControlCloseTemplateProvider}" CloseGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonGlyph}}" HeaderItemControlStyle="{StaticResource ResourceKey={dxt:ThemedWindowHeaderItemsThemeKey ResourceKey=HeaderCloseButtonStyle}}" MouseOverBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundMouseOverState}}" MouseOverForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundMouseOverState}}" NormalBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundNormalState}}" NormalForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundNormalState}}" PressedBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundPressedState}}" PressedForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundPressedState}}" />

</ResourceDictionary>