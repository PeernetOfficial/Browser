<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
                    xmlns:dxct="http://schemas.devexpress.com/winfx/2008/xaml/charts/themekeys"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <dxt:ResourceDictionaryEx Source="{dx:ChartsResource themes/Generic/ToolTip.xaml}"/>
        <dxt:ResourceDictionaryEx Source="{dx:ChartsResource themes/Generic/LegendMarker.xaml}"/>
    </ResourceDictionary.MergedDictionaries>

    <dxc:BrushOverlayConverter x:Key="brushOverlayConverter"/>

    <dxc:RectsListToGeometryConverter x:Key="rectsListToGeometryConverter"/>

    <dxc:ChartDoubleCollectionConverter x:Key="strokeDashArrayConverter"/>

    <SolidColorBrush x:Key="{dxct:ChartBrushesThemeKey ResourceKey=Axis2DInterlacedBrush}" Color="#07000000"/>

    <SolidColorBrush x:Key="{dxct:ChartBrushesThemeKey ResourceKey=Axis3DInterlacedBrush}" Color="#07000000"/>

    <SolidColorBrush x:Key="{dxct:ChartBrushesThemeKey ResourceKey=GridLineBrush}" Color="#26000000"/>

    <SolidColorBrush x:Key="{dxct:ChartBrushesThemeKey ResourceKey=MinorGridLineBrush}" Color="#0F000000"/>

    <Style x:Key="Axis2DStyle" TargetType="{x:Type dxc:Axis2D}">
        <Setter Property="Brush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=AxisBrush}}"/>
        <Setter Property="InterlacedBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=Axis2DInterlacedBrush}}"/>
        <Setter Property="GridLinesBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=GridLineBrush}}"/>
        <Setter Property="GridLinesMinorBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=MinorGridLineBrush}}"/>
        <Setter Property="MinorCount" Value="4"/>
        <Setter Property="CrosshairLabelTemplate" Value="{StaticResource CrosshairAxisLabelPresentationTemplate}"/>
        <Setter Property="ScaleBreakBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=DomainBorderBrush}}"/>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.Axis2DPresentation}" TargetType="{x:Type dxc:Axis2DPresentation}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxc:Axis2DPresentation}">
                    <dxc:AxisRenderControl AxisGeometry="{Binding Path=AxisItem.AxisGeometry, RelativeSource={RelativeSource TemplatedParent}}"
                                           Brush="{Binding Path=Axis.Brush, RelativeSource={RelativeSource TemplatedParent}}"
                                           MajorTickmarksGeometry="{Binding Path=AxisItem.MajorTickmarksGeometry, RelativeSource={RelativeSource TemplatedParent}}"
                                           MinorTickmarksGeometry="{Binding Path=AxisItem.MinorTickmarksGeometry, RelativeSource={RelativeSource TemplatedParent}}"
                                           RenderTransform="{Binding Path=AxisItem.GeometryTransform, RelativeSource={RelativeSource TemplatedParent}}"
                                           RenderTransformOrigin="0.5,0.5"
                                           Visibility="{Binding AxisItem.Visibility, RelativeSource={RelativeSource TemplatedParent}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.AxisX2D}"
           BasedOn="{StaticResource Axis2DStyle}"
           TargetType="{x:Type dxc:AxisX2D}">
        <Setter Property="Interlaced" Value="false"/>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.AxisY2D}"
           BasedOn="{StaticResource Axis2DStyle}"
           TargetType="{x:Type dxc:AxisY2D}">
        <Setter Property="Interlaced" Value="true"/>
        <Setter Property="GridLinesVisible" Value="True"/>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.SecondaryAxisX2D}"
           BasedOn="{StaticResource Axis2DStyle}"
           TargetType="{x:Type dxc:SecondaryAxisX2D}">
        <Setter Property="Alignment" Value="Far"/>
        <Setter Property="Interlaced" Value="false"/>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.SecondaryAxisY2D}"
           BasedOn="{StaticResource Axis2DStyle}"
           TargetType="{x:Type dxc:SecondaryAxisY2D}">
        <Setter Property="Alignment" Value="Far"/>
        <Setter Property="Interlaced" Value="false"/>
    </Style>

    <Style x:Key="CircularAxisY2DStyle" TargetType="dxc:CircularAxisY2D">
        <Setter Property="Brush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=AxisBrush}}"/>
        <Setter Property="InterlacedBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=Axis2DInterlacedBrush}}"/>
        <Setter Property="GridLinesBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=GridLineBrush}}"/>
        <Setter Property="GridLinesMinorBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=MinorGridLineBrush}}"/>
        <Setter Property="GridLinesVisible" Value="True"/>
        <Setter Property="MinorCount" Value="4"/>
    </Style>

    <Style x:Key="CircularAxisX2DStyle" TargetType="dxc:CircularAxisX2D">
        <Setter Property="InterlacedBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=Axis2DInterlacedBrush}}"/>
        <Setter Property="GridLinesBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=GridLineBrush}}"/>
        <Setter Property="GridLinesMinorBrush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=MinorGridLineBrush}}"/>
        <Setter Property="GridLinesVisible" Value="True"/>
        <Setter Property="MinorCount" Value="4"/>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.RadarAxisY2D}"
           BasedOn="{StaticResource CircularAxisY2DStyle}"
           TargetType="dxc:RadarAxisY2D"/>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.PolarAxisY2D}"
           BasedOn="{StaticResource CircularAxisY2DStyle}"
           TargetType="dxc:PolarAxisY2D"/>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.RadarAxisX2D}"
           BasedOn="{StaticResource CircularAxisX2DStyle}"
           TargetType="dxc:RadarAxisX2D"/>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.PolarAxisX2D}"
           BasedOn="{StaticResource CircularAxisX2DStyle}"
           TargetType="dxc:PolarAxisX2D"/>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.ConstantLine}" TargetType="{x:Type dxc:ConstantLine}">
        <Setter Property="Brush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=ConstantLineBrush}}"/>
        <Setter Property="LegendMarkerTemplate" Value="{StaticResource ConstantLineLegendMarkerTemplate}"/>
        <Setter Property="ElementTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Line x:Name="PART_Line"
                          Stroke="{Binding Path=ConstantLine.Brush}"
                          StrokeDashArray="{Binding DashArray, Converter={StaticResource strokeDashArrayConverter}}"
                          StrokeDashCap="{Binding Path=ConstantLine.ActualLineStyle.DashCap}"
                          StrokeDashOffset="{Binding DashOffset}"
                          StrokeLineJoin="{Binding Path=ConstantLine.ActualLineStyle.LineJoin}"
                          StrokeMiterLimit="{Binding Path=ConstantLine.ActualLineStyle.MiterLimit}"
                          StrokeThickness="{Binding Path=ConstantLine.ActualLineStyle.Thickness}"
                          Visibility="{Binding Visibility, RelativeSource={RelativeSource TemplatedParent}}"
                          X1="{Binding Offset}"
                          X2="{Binding Offset}"
                          Y2="{Binding Length}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.ConstantLinePresentation}" TargetType="{x:Type dxc:ConstantLinePresentation}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxc:ConstantLinePresentation}">
                    <Grid>
                        <ContentPresenter Content="{Binding Path=ConstantLineItem, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{Binding Path=ConstantLineItem.ConstantLine.ElementTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <dxc:SelectionGeometryControl Geometry="{Binding Path=ConstantLineItem.SelectionGeometry, RelativeSource={RelativeSource TemplatedParent}}"
                                                      IsHighlighted="{Binding Path=ConstantLine.SelectionInfo.IsHighlighted, RelativeSource={RelativeSource TemplatedParent}}"
                                                      IsSelected="{Binding Path=ConstantLine.SelectionInfo.IsSelected, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.StripPresentation}" TargetType="{x:Type dxc:StripPresentation}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxc:StripPresentation}">
                    <Canvas>
                        <Rectangle x:Name="PART_Rect"
                                   Canvas.Left="{Binding Path=StripItem.Offset, RelativeSource={RelativeSource TemplatedParent}}"
                                   Fill="{Binding Path=Strip.Brush, RelativeSource={RelativeSource TemplatedParent}}"
                                   Height="{Binding Path=StripItem.Length, RelativeSource={RelativeSource TemplatedParent}}"
                                   Stroke="{Binding Path=Strip.BorderColor, Converter={StaticResource brushOverlayConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                   StrokeThickness="1"
                                   Width="{Binding Path=StripItem.Thickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <dxc:SelectionGeometryControl Geometry="{Binding Path=StripItem.SelectionGeometry, RelativeSource={RelativeSource TemplatedParent}}"
                                                      IsHighlighted="{Binding Path=Strip.SelectionInfo.IsHighlighted, RelativeSource={RelativeSource TemplatedParent}}"
                                                      IsSelected="{Binding Path=Strip.SelectionInfo.IsSelected, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.Strip}" TargetType="{x:Type dxc:Strip}">
        <Setter Property="Brush" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=StripBrush}}"/>
        <Setter Property="BorderColor" Value="{DynamicResource {dxct:ChartBrushesThemeKey ResourceKey=StripBorderColor}}"/>
        <Setter Property="LegendMarkerTemplate" Value="{StaticResource StripLegendMarkerTemplate}"/>
    </Style>

</ResourceDictionary>